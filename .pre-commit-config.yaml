exclude: ^features/steps/data/
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.1.0
    hooks:
      - id: no-commit-to-branch
        args: ["--branch", "main"]
      - id: trailing-whitespace
      - id: end-of-file-fixer
        exclude: ^.circleci/config.yml$
      - id: debug-statements
      - id: check-added-large-files
      - id: check-ast
      - id: check-toml
      - id: check-yaml
      - id: forbid-new-submodules
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-symlinks
      - id: check-vcs-permalinks
      - id: detect-private-key
  - repo: https://github.com/editorconfig-checker/editorconfig-checker.python
    rev: "2.4.0"
    hooks:
      - id: editorconfig-checker
  - repo: local
    hooks:
      - id: circleci-validate
        name: circleci-validate
        entry: circleci config validate
        language: system
        files: ^.circleci/config\.yml$

      #################################
      # Python specific configuration #
      #################################
      # Many linters such as flake8, prospector and pyright need to interact a bit more dynamically
      # with the installed environment. The pre-commit authors really only provide the `system`
      # language for this use-case. When using the system language, it is ultimately less error
      # prone to run everything in the poetry environment and simply bypass the pre-commit author's
      # intent of having isolated environments for static linters.
      - id: autoflake
        name: autoflake
        entry: poetry run autoflake
        language: system
        types: [python]
      - id: pyupgrade
        name: pyupgrade
        entry: poetry run pyupgrade
        language: system
        types: [python]
      - id: black
        name: black
        entry: poetry run black
        language: system
        types: [python]
      - id: reorder-python-imports
        name: reorder-python-imports
        entry: poetry run reorder-python-imports --py37-plus --add-import 'from __future__ import annotations'
        language: system
        types: [python]
      - id: pyright
        name: pyright
        # pyright calls "python3" on the path to discover the location of the environment and 3rd
        # party packages that are not a part of typeshed. For non-poetry projects you can consider
        # activating the environment using bash: `bash -c 'venv/bin/activate && pyright'` or
        # manually adding the venv to the path: `bash -c 'env PATH=venv/bin:$PATH pyright'
        entry: poetry run pyright
        language: node
        pass_filenames: false
        types: [python]
        additional_dependencies: ["pyright@1.1.233"]
      - id: prospector
        # Linter for source directory uses the profile that also checks security issues.
        name: prospector (strict)
        entry: poetry run prospector --profile strict
        files: ^src
        language: system
        require_serial: true
        types: [python]
      - id: prospector
        # Test directories are expected to have fixtures and less security requirements.
        name: prospector
        entry: poetry run prospector
        files: ^(tests|features)/
        language: system
        require_serial: true
        types: [python]
